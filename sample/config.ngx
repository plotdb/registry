upstream apiserver {
  server 127.0.0.1:9900;
}

proxy_cache_path /tmp/cache keys_zone=cache:10m levels=1:2 inactive=600s max_size=100m;

server {
  listen 80;
  server_name registry.loco;

# this should be put outside server block, where `<cache>` should be the same with `cache.name` config.
# proxy_cache_path /tmp/cache keys_zone=<cache>:10m levels=1:2 inactive=600s max_size=100m;

# requests to path under `internal` are from `X-Accel-Redirect` from registry backend
# and thus should not hit backend again.


location ~ ^/ilib/(.*)$ {
  internal;
  root /var/lib/cdn/cache/;
  try_files /lib/$1 /lib/$1/index.html /$1/index.min.js =404;
}

location ~ ^/lib/(.*)$ {
  root /var/lib/cdn/cache/;
  # proxy_cache is file-based. here we use `.reg.404` for pkg-based 404 detection
  # however, we don't know how to invalidate this. So this is not used for now.
  # to use this, we have to use location pattern such as:
  #
  #     location ~ ^/lib/(?<scope>.+)/(?<name>.+)/(?<version>.+)/(?<path>.*)$ { ... }
  #     location ~ ^/lib/(?<name>.+)/(?<version>.+)/(?<path>.*)$ { ... }
  #
  # if (-f /var/lib/cdn/cache/lib/$name/$version/.reg.404) {
  #   return 404 "";
  #   break;
  # }
  try_files /lib/$1 /lib/$1/index.html /lib/$1/index.min.js @registry_backend;
}

# a dedicated location for registry_backend so we can use a dedicated server for registry
# to offload requests from main backend. This is controlled by `upstream` config.
location @registry_backend {
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header Host $http_host;
  proxy_set_header X-NginX-Proxy true;
  proxy_set_header X-Forwarded-Proto $scheme;
  # cache 200 / 404 result for `cache-period` so user can't bombard our backend
  proxy_cache cache;
  proxy_cache_valid 200 404 10m;
  proxy_pass http://apiserver;
}

}
